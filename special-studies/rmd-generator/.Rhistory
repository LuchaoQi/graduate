{
fileName <- "model"
rDataFile <- paste0(fileName, ".RData")
csvFile <- paste0(fileName, ".csv")
save(model, file=rDataFile)
write.csv(model$model, file=csvFile)
title <- getTitle(model, rDataFile)
intro <- getIntroduction(model)
graphs <- getGraphs(model)
analysis <- getAnalysis(model)
conclusions <- getConclusions(model, 0.05)
appendix <- getAppendix(c(rDataFile, csvFile))
rmdFile <- paste(title, intro, graphs, analysis, conclusions, appendix, sep="\n\n")
cat(rmdFile)
#variableVec <- attr(attr(model$terms,"factors"),"dimnames")[[1]]
#introduction <- paste0("Linear model summary\n=====================\n\n",
#                       "A linear regression was performed on the data. ",
#                       "The analysis and summary is supplied on this page. ",
#                       "The original data can be found through a link at the bottom.\n\n")
#
#presentation <- paste0("## Presentation of the data\n\n",
#                       "Here are some graphs representing the original data\n",
#                       )
#
#setupChunk <- paste0("```{r setup}\nopts_chunk$set(fig.width=5, fig.height=5)\n",
#                     "load(\"model.RData\")\n",
#                     "```\n")
#
}
generateRmdSummary <- function(model)
{
if (class(model) == "lm")
{
generateLmSummary(model)
}
else
{
stop("object of class ", class(model), " is invalid")
}
}
generateRmdSummary(model)
?sink
xVals <- 1:100
yVals <- rnorm(100) + xVals
xVals <- rnorm(100)
yVals <- rnorm(100)
model <- lm(yVals ~ xVals)
#plot(model)
# ?plot.lm
writeHeader <- function(string, headerLevel, hashOnly = FALSE)
{
if (length(string) != 1)
{
stop("invalid string vector length: ", length(string))
}
if (length(headerLevel) != 1)
{
stop("invalid integer vector length: ", length(headerLevel))
}
if (class(string) != "character")
{
stop("invalid string object class: ", class(string))
}
if (class(headerLevel) != "numeric" && class(headerLevel) != "integer" )
{
stop("invalid header class: ", class(headerLevel))
}
if (headerLevel < 1 || headerLevel > 7)
{
stop("invalid header level: ", headerLevel)
}
headerLevel <- round(headerLevel)
if (hashOnly || headerLevel > 2)
{
frontHashes <- paste(rep("#", headerLevel), collapse="")
header <- paste0(frontHashes, "\t", string)
return(header)
}
else
{
delimitChar <- "="
if (headerLevel == 2)
{
delimitChar <- "-"
}
nChar <- nchar(string)
bottomDelimiter <- paste(rep(delimitChar, nChar), collapse="")
header <- paste0(string, "\n", bottomDelimiter)
return(header)
}
}
writeCodeChunk <- function(codeVec, chunkName = "")
{
if (class(codeVec) != "character")
{
stop("invalid code class: ", class(codeVec))
}
if (class(chunkName) != "character")
{
stop("invalid chunk name class: ", class(chunkName))
}
if (length(chunkName) != 1)
{
stop("invalid chunk name length: ", length(chunkName))
}
chunk <- "```{r"
if (chunkName != "")
{
chunk <- paste(chunk, chunkName)
}
chunk <- paste0(chunk, "}\n")
for (i in 1:length(codeVec))
{
chunk <- paste0(chunk, codeVec[i])
chunk <- paste0(chunk, "\n")
}
chunk <- paste0(chunk,"```")
return(chunk)
}
writeCodeInline <- function(string)
{
inline <- paste0("`",string,"`")
return(inline)
}
getPValue <- function(model)
{
if (class(model) == "lm")
{
f <- summary(model)$fstatistic
pValue <- pf(f[1], f[2], f[3], lower=FALSE)
return(pValue)
}
else
{
stop("object of class ", class(model), " is invalid")
}
}
getTitle <- function(model, rDataFile)
{
if (class(model) == "lm")
{
title <- writeHeader("Analysis of a Linear Model",1)
codeVec <- paste0("load(\"",rDataFile,"\")")
codeSetup <- writeCodeChunk(codeVec, "importData")
section <- paste(title,codeSetup,sep = "\n\n")
return(section)
}
else
{
stop("object of class ", class(model), " is invalid")
}
}
getIntroduction <- function(model)
{
if (class(model) == "lm")
{
intro <- writeHeader("Introduction", 2)
lmInline <- writeCodeInline("lm")
callChunk <- writeCodeChunk("model$call")
text <- paste0("A linear regression analysis was performed in R, using the function ",
lmInline,
". The data was fitted to the following model")
section <- paste(intro, text, callChunk, sep = "\n\n")
return(section)
}
else
{
stop("object of class ", class(model), " is invalid")
}
}
getGraphs <- function(model)
{
if (class(model) == "lm")
{
intro <- writeHeader("Graphs", 2)
text <- "The following explanatory graphs will be presented unashamedly without commentary."
plotChunk <- writeCodeChunk("plot(model)")
section <- paste(intro, text, plotChunk, sep = "\n\n")
}
else
{
stop("object of class ", class(model), " is invalid")
}
}
getAnalysis <- function(model)
{
if (class(model) == "lm")
{
intro <- writeHeader("Data Analysis", 2)
text1 <- "Next we show the analysis of the data."
chunk1 <- writeCodeChunk("summary(model)")
text2 <- "Notice that the p-value is "
codeVec <- c("f <- summary(model)$fstatistic",
"pValue <- pf(f[1], f[2], f[3], lower=FALSE)",
"pValue")
chunk2 <- writeCodeChunk(codeVec)
section <- paste(intro, text1, chunk1, text2, chunk2, sep = "\n\n")
return(section)
}
else
{
stop("object of class ", class(model), " is invalid")
}
}
getConclusions <- function(model, significantAt)
{
if (class(model) == "lm")
{
intro <- writeHeader("Conclusions", 2)
pValue <- getPValue(model)
if (pValue < significantAt)
{
text <- "The results are statistically significant."
section <- paste(intro, text, sep = "\n\n")
return(section)
}
else
{
text <- "The results are not statistically significant."
section <- paste(intro, text, sep = "\n\n")
return(section)
}
}
else
{
stop("object of class ", class(model), " is invalid")
}
}
getAppendix <- function(files)
{
string <- ""
for (i in 1:length(files))
{
string <- paste0(string, "+","\t","[",files[i],"]","(",files[i],")","\n")
}
return(string)
}
generateLmSummary <- function(model)
{
fileName <- "model"
rDataFile <- paste0(fileName, ".RData")
csvFile <- paste0(fileName, ".csv")
save(model, file=rDataFile)
write.csv(model$model, file=csvFile)
title <- getTitle(model, rDataFile)
intro <- getIntroduction(model)
graphs <- getGraphs(model)
analysis <- getAnalysis(model)
conclusions <- getConclusions(model, 0.05)
appendix <- getAppendix(c(rDataFile, csvFile))
rmdFile <- paste(title, intro, graphs, analysis, conclusions, appendix, sep="\n\n")
sink("out.Rmd")
cat(rmdFile)
sink()
}
generateRmdSummary <- function(model)
{
if (class(model) == "lm")
{
generateLmSummary(model)
}
else
{
stop("object of class ", class(model), " is invalid")
}
}
generateRmdSummary(model)
xVals <- 1:100
yVals <- rnorm(100) + xVals
xVals <- rnorm(100)
yVals <- rnorm(100)
model <- lm(yVals ~ xVals)
#plot(model)
# ?plot.lm
writeHeader <- function(string, headerLevel, hashOnly = FALSE)
{
if (length(string) != 1)
{
stop("invalid string vector length: ", length(string))
}
if (length(headerLevel) != 1)
{
stop("invalid integer vector length: ", length(headerLevel))
}
if (class(string) != "character")
{
stop("invalid string object class: ", class(string))
}
if (class(headerLevel) != "numeric" && class(headerLevel) != "integer" )
{
stop("invalid header class: ", class(headerLevel))
}
if (headerLevel < 1 || headerLevel > 7)
{
stop("invalid header level: ", headerLevel)
}
headerLevel <- round(headerLevel)
if (hashOnly || headerLevel > 2)
{
frontHashes <- paste(rep("#", headerLevel), collapse="")
header <- paste0(frontHashes, "\t", string)
return(header)
}
else
{
delimitChar <- "="
if (headerLevel == 2)
{
delimitChar <- "-"
}
nChar <- nchar(string)
bottomDelimiter <- paste(rep(delimitChar, nChar), collapse="")
header <- paste0(string, "\n", bottomDelimiter)
return(header)
}
}
writeCodeChunk <- function(codeVec, chunkName = "")
{
if (class(codeVec) != "character")
{
stop("invalid code class: ", class(codeVec))
}
if (class(chunkName) != "character")
{
stop("invalid chunk name class: ", class(chunkName))
}
if (length(chunkName) != 1)
{
stop("invalid chunk name length: ", length(chunkName))
}
chunk <- "```{r"
if (chunkName != "")
{
chunk <- paste(chunk, chunkName)
}
chunk <- paste0(chunk, "}\n")
for (i in 1:length(codeVec))
{
chunk <- paste0(chunk, codeVec[i])
chunk <- paste0(chunk, "\n")
}
chunk <- paste0(chunk,"```")
return(chunk)
}
writeCodeInline <- function(string)
{
inline <- paste0("`",string,"`")
return(inline)
}
getPValue <- function(model)
{
if (class(model) == "lm")
{
f <- summary(model)$fstatistic
pValue <- pf(f[1], f[2], f[3], lower=FALSE)
return(pValue)
}
else
{
stop("object of class ", class(model), " is invalid")
}
}
getTitle <- function(model, rDataFile)
{
if (class(model) == "lm")
{
title <- writeHeader("Analysis of a Linear Model",1)
codeVec <- paste0("load(\"",rDataFile,"\")")
codeSetup <- writeCodeChunk(codeVec, "importData")
section <- paste(title,codeSetup,sep = "\n\n")
return(section)
}
else
{
stop("object of class ", class(model), " is invalid")
}
}
getIntroduction <- function(model)
{
if (class(model) == "lm")
{
intro <- writeHeader("Introduction", 2)
lmInline <- writeCodeInline("lm")
callChunk <- writeCodeChunk("model$call")
text <- paste0("A linear regression analysis was performed in R, using the function ",
lmInline,
". The data was fitted to the following model")
section <- paste(intro, text, callChunk, sep = "\n\n")
return(section)
}
else
{
stop("object of class ", class(model), " is invalid")
}
}
getGraphs <- function(model)
{
if (class(model) == "lm")
{
intro <- writeHeader("Graphs", 2)
text <- "The following explanatory graphs will be presented unashamedly without commentary."
plotChunk <- writeCodeChunk("plot(model)")
section <- paste(intro, text, plotChunk, sep = "\n\n")
}
else
{
stop("object of class ", class(model), " is invalid")
}
}
getAnalysis <- function(model)
{
if (class(model) == "lm")
{
intro <- writeHeader("Data Analysis", 2)
text1 <- "Next we show the analysis of the data."
chunk1 <- writeCodeChunk("summary(model)")
text2 <- "Notice that the p-value is "
codeVec <- c("f <- summary(model)$fstatistic",
"pValue <- pf(f[1], f[2], f[3], lower=FALSE)",
"pValue")
chunk2 <- writeCodeChunk(codeVec)
section <- paste(intro, text1, chunk1, text2, chunk2, sep = "\n\n")
return(section)
}
else
{
stop("object of class ", class(model), " is invalid")
}
}
getConclusions <- function(model, significantAt)
{
if (class(model) == "lm")
{
intro <- writeHeader("Conclusions", 2)
pValue <- getPValue(model)
if (pValue < significantAt)
{
text <- "The results are statistically significant."
section <- paste(intro, text, sep = "\n\n")
return(section)
}
else
{
text <- "The results are not statistically significant."
section <- paste(intro, text, sep = "\n\n")
return(section)
}
}
else
{
stop("object of class ", class(model), " is invalid")
}
}
getAppendix <- function(files)
{
title <- writeHeader("Appendix", 2)
string <- ""
for (i in 1:length(files))
{
string <- paste0(string, "+","\t","[",files[i],"]","(",files[i],")","\n")
}
section <- paste(title, string, sep = "\n\n")
return(string)
}
generateLmSummary <- function(model)
{
fileName <- "model"
rDataFile <- paste0(fileName, ".RData")
csvFile <- paste0(fileName, ".csv")
save(model, file=rDataFile)
write.csv(model$model, file=csvFile)
title <- getTitle(model, rDataFile)
intro <- getIntroduction(model)
graphs <- getGraphs(model)
analysis <- getAnalysis(model)
conclusions <- getConclusions(model, 0.05)
appendix <- getAppendix(c(rDataFile, csvFile))
rmdFile <- paste(title, intro, graphs, analysis, conclusions, appendix, sep="\n\n")
sink("out.Rmd")
cat(rmdFile)
sink()
}
generateRmdSummary <- function(model)
{
if (class(model) == "lm")
{
generateLmSummary(model)
}
else
{
stop("object of class ", class(model), " is invalid")
}
}
generateRmdSummary(model)
source('~/Google Drive/Documents/JHSPH/repos/graduate/special-studies/rmd-generator/generateRmdSummary.R')
generateRmdSummary(model)
source('~/Google Drive/Documents/JHSPH/repos/graduate/special-studies/rmd-generator/generateRmdSummary.R')
generateRmdSummary(model)
source('~/Google Drive/Documents/JHSPH/repos/graduate/special-studies/rmd-generator/generateRmdSummary.R')
generateRmdSummary(model)
pf (f[1],f[2],f[3],lower=false)
pf (f[1],f[2],f[3],lower=FALSE)
pf (f[1],f[2],f[3],lower=FALSE) ->pval
as.character(pval)
source('~/Google Drive/Documents/JHSPH/repos/graduate/special-studies/rmd-generator/generateRmdSummary.R')
generateRmdSummary(model)
source('~/Google Drive/Documents/JHSPH/repos/graduate/special-studies/rmd-generator/examplesRmdGenerator.R')
source('~/Google Drive/Documents/JHSPH/repos/graduate/special-studies/rmd-generator/generateRmdSummary.R')
setwd("~/Google Drive/Documents/JHSPH/repos/graduate/special-studies/rmd-generator")
source('~/Google Drive/Documents/JHSPH/repos/graduate/special-studies/rmd-generator/examplesRmdGenerator.R')
testCases(1)
testCases(2)
